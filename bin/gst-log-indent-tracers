#!/usr/bin/python3
import io
import re
from argparse import Namespace

from rich import get_console
from rich.console import Console
from rich.color import Color
from rich.style import Style
from rich.text import Text

from gst_log_parsing import GstLogEntry, LogProcessingApp, rich_text_to_gst_log_text, rich_text_highlight_regex, color_bg_and_fg
import sys

indent_level_per_thread = {}

def get_indent_level(thread):
    indent_level_per_thread.setdefault(thread, 0)
    return indent_level_per_thread[thread]

def inc_indent_level(thread):
    indent_level_per_thread[thread] = get_indent_level(thread) + 1

def dec_indent_level(thread):
    indent_level_per_thread[thread] = get_indent_level(thread) - 1
    if indent_level_per_thread[thread] < 0:
        indent_level_per_thread[thread] = 0

tracer_functions_color_codes = {
    "do_push_buffer_pre": 111,
    "do_push_buffer_post": 110,
    "do_push_buffer_list_pre": 117,
    "do_push_buffer_list_post": 116,
    "do_pull_range_pre": 123,
    "do_pull_range_post": 122,
    "do_push_event_pre": 184,
    "do_push_event_post": 185,
    "do_pad_query_pre": 190,
    "do_pad_query_post": 191,
    "do_post_message_pre": 208,
    "do_post_message_post": 209,
    "do_element_query_pre": 190,
    "do_element_query_post": 191,
    "do_element_new": 46,
    "do_element_add_pad": 48,
    "do_element_remove_pad": 172,
    "do_element_change_state_pre": 51,
    "do_element_change_state_post": 123,
    "do_bin_add_pre": 76,
    "do_bin_add_post": 77,
    "do_bin_remove_pre": 178,
    "do_bin_remove_post": 179,
    "do_pad_link_pre": 81,
    "do_pad_link_post": 80,
    "do_pad_unlink_pre": 147,
    "do_pad_unlink_post": 146,
}
tracer_functions = set(tracer_functions_color_codes.keys())
tracer_functions_styles = {
    k: color_bg_and_fg(v) + Style(italic=("_pre" in k))
    for k, v in tracer_functions_color_codes.items()
}

pad_style = Style(bgcolor=Color.from_ansi(229), color=Color.from_ansi(234))

event_color_codes = {
    # subprojects/gstreamer/gst/gstevent.c: event_quarks[] = ...
    "unknown": 235,
    "flush-start": 124,
    "flush-stop": 129,
    "select-streams": 108,
    "stream-start": 114,
    "stream-collection": 116,
    "caps": 187,
    "segment": 188,
    "tag": 106,
    "toc": 94,
    "protection": 160,
    "buffersize": 233,
    "sink-message": 178,
    "eos": 19,
    "segment-done": 33,
    "gap": 214,
    "qos": 60,
    "seek": 159,
    "navigation": 157,
    "latency": 231,
    "step": 224,
    "reconfigure": 202,
    "toc-select": 106,
    "custom-upstream": 164,
    "custom-downstream": 164,
    "custom-downstream-oob": 164,
    "custom-downstream-sticky": 164,
    "custom-both": 164,
    "custom-both-oob": 164,
    "stream-group-done": 123,
    "instant-rate-change": 87,
    "instant-rate-sync-time": 81,
}
event_styles = {
    event_name: color_bg_and_fg(color_code) + Style(bold=True)
    for event_name, color_code in event_color_codes.items()
}

def style_event_name(event_name):
    return event_styles.get(event_name, event_styles["unknown"])

def highlight_hook_function_pad(text: Text):
    rich_text_highlight_regex(text, r":do_\w+:(<[^>]+>)", [pad_style])

def highlight_default_hook(text: Text):
    highlight_hook_function_pad(text)

def highlight_do_push_event(text: Text):
    highlight_hook_function_pad(text)
    rich_text_highlight_regex(text, r", event=(\S+)", [style_event_name])

def highlight_do_pad_link(text: Text):
    rich_text_highlight_regex(text, ", src=(<[^>]+>), sink=(<[^>]+>)", [pad_style, pad_style])


def hook_general_name(function_name: str) -> str:
    return re.sub("_(pre|post)$", "", function_name)

def get_highlighter_function(hook_function_name: str):
    highlight_function = globals().get(f"highlight_{hook_function_name}") \
        or globals().get(f"highlight_{hook_general_name(hook_function_name)}") \
        or highlight_default_hook
    return highlight_function

rp_any_tracer_function_name = r"\b(?:" + r"|".join(tracer_functions) + r")\b"
rp_tracer_event_highlight = rf":({rp_any_tracer_function_name})(:)(<[^>]+>)"
re_tracer_event_highlight = re.compile(rp_tracer_event_highlight)

class GstLogIndentTracers(LogProcessingApp):
    description = """
    Creates levels of indentation for the logs generated by the 'log' GstTracer, so that
    it's possible to follow visually the chaining of events.
    """

    def configure_argparse(self, argparse):
        super().configure_argparse(argparse)
        argparse.add_argument("-q", "--tracers-only", "--only-tracers", action="store_true",
            help="Print only lines that are printed by the GstTracer(s)")

    def process_input_file(self, input_file: io.TextIOBase, output_file: io.TextIOBase, args: Namespace):
        for line in input_file:
            entry = GstLogEntry.parse(line)
            if not entry:
                output_file.write(line)
                continue

            if "_post:" in entry.function_context:
                dec_indent_level(entry.thread_str)

            # Add arrows
            modified_line = entry.original_line_with_incision(" â†’ " * get_indent_level(entry.thread_str))
            # Format the tracer event function, if any
            text = Text.from_ansi(modified_line)
            if match := re.search(re_tracer_event_highlight, str(text)):
                function_name = match.group(1)
                function_style = tracer_functions_styles[function_name]
                text.stylize(function_style, start=match.start(1), end=match.end(2))
                highlighter_function = get_highlighter_function(function_name)
                highlighter_function(text)
                modified_line = rich_text_to_gst_log_text(text)

            if not args.tracers_only or match:
                output_file.write(modified_line)

            if "_pre:" in entry.function_context:
                inc_indent_level(entry.thread_str)


if __name__ == '__main__':
    GstLogIndentTracers().main()
