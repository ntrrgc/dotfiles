#!/usr/bin/python3
# Stack UNIX socket line multiplexer.
#
# Copyright (c) 2017 Alicia Boya Garc√≠a
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import os
import signal
import sys
import traceback
from argparse import ArgumentParser, RawTextHelpFormatter
from socket import socket
from typing import List, Callable

from tornado import gen
from tornado.ioloop import IOLoop
from tornado.iostream import IOStream, StreamClosedError
from tornado.netutil import bind_unix_socket, add_accept_handler


def debug(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


client_stack: List[socket] = []


def sock_accept(connection: socket, address):
    client_stack.append(connection)
    client_stream = IOStream(connection)

    handle_client(client_stream)


@gen.coroutine
def handle_client(stream: IOStream):
    client_socket = stream.socket
    while True:
        try:
            line = yield stream.read_until(b"\n")
            topmost_client = client_stack[-1]

            if topmost_client is client_socket:
                os.write(1, line)
        except StreamClosedError:
            client_stack.remove(client_socket)
            return
        except GeneratorExit:
            return
        except:
            traceback.print_exc()
            return


def start_forking(server_callback: Callable[[], None], pidfile: str = None, no_fork=False):
    if no_fork:
        # Skip all other stuff...
        server_callback()
    else:
        # Time to fork, but before that...

        # Don't make anyone wait
        sys.stdin.close()

        # Don't get killed by your parent
        signal.signal(signal.SIGHUP, signal.SIG_IGN)

        # Don't get killed by ^C
        signal.signal(signal.SIGINT, signal.SIG_IGN)

        pid = os.fork()
        if pid == 0:
            # I'm the child, let's serve all the things
            server_callback()
        else:
            # I'm the parent, write the PID file and return
            if pidfile is not None:
                with open(pidfile, "w") as f:
                    f.write(str(pid))


def main_loop():
    try:
        IOLoop.current().start()
    except KeyboardInterrupt:
        pass


if __name__ == '__main__':
    parser = ArgumentParser(formatter_class=RawTextHelpFormatter,
                            description="""
Stack UNIX socket line multiplexer. 

This program listens on a UNIX socket where zero or more clients can connect
and send data delimited by the newline character. 

Every time a line is received from the most recent alive client it is printed,
while lines from older clients are discarded silently (they remain inactive).
Older clients become active again when every other client newer than them
closes their connections. 

This program forks: a child keeps working on the background while the parent
process finishes after the socket is bound and listening.
""".strip())

    parser.add_argument("socket", type=str, help="path to socket file")
    parser.add_argument("--pidfile", "-p", type=str, nargs="?", help="optional PID file")
    parser.add_argument("--no-fork", "-k", default=False, action='store_true',
                        help="run synchronously instead of forking")

    args = parser.parse_args()

    sock = bind_unix_socket(args.socket)
    add_accept_handler(sock, sock_accept)

    start_forking(main_loop, pidfile=args.pidfile, no_fork=args.no_fork)
