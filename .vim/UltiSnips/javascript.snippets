snippet f "anonymous function" w
function(${1}) {
  ${2}
}${3}
endsnippet

snippet l "lambda" w
function(${1}) {
  return ${2:};
}${3}
endsnippet

snippet mod "module" b
angular.module("${1:mod}", [${2:}])
  ${3}
endsnippet

snippet conf "config" w
.config(function(${1:}) {
  ${2:}
})
endsnippet

snippet ctrl "controller" w
.controller("${1:name}", function($scope${2:}) {
  ${3:}
})
endsnippet

snippet ctrl; "controller" w
.controller("${1:Ctrl}", function($scope${2:}) {
  ${3:}
});
endsnippet

snippet s "scope" w
$scope.
endsnippet

snippet se "scope set" w
$scope.${1} = ${2};
endsnippet

snippet pr1 "promise" !b
var deferred = $q.defer();

${1}

return deferred.promise;
endsnippet
snippet rs1 "resolve" !b
deferred.resolve(${1});
endsnippet

snippet pr "promise" !b
var q = $q.defer();

${1}

return q.promise;
endsnippet
snippet rs "resolve" !b
q.resolve(${1});
endsnippet

snippet ser "service" !b
.service("${1}", function(${2}) {
  ${3}
})${4}
endsnippet

snippet fi "filter" !b
.filter("${1}", function(${2}) {
  return function(${3}) {
    ${4}
  };
})${5}
endsnippet

snippet r "return" !b
return ${1};${2}
endsnippet

snippet lc "toLowerCase" w
toLowerCase()
endsnippet
snippet uc "toUpperCase" w
toUpperCase()
endsnippet

snippet met "method" !b
this.${1} = function(${2}) {
  ${3};
};${4}
endsnippet

snippet dir "console.dir" !b
console.dir(${1});
endsnippet

snippet log "console.log" !b
console.log(${1});
endsnippet

snippet /(^|(?<=\W))\./ "this" r
this.
endsnippet

snippet m "method" !b
${1:}.prototype.${2:} = function(${3:}) {
  ${4:}
};
endsnippet

snippet desc "describe" !b
describe("${1}", function() {
  ${2}
});
endsnippet

snippet it "it" !b
it("${1}", function() {
  ${2}
});
endsnippet

snippet us "use strict" !b
"use strict";


endsnippet

snippet ns "namespace" !b
(function(${1}) {
  "use strict";

  ${3}

}(${2}));

snippet neq "expect not to equal" !b
expect(${1}).not.toEqual(${2});
endsnippet

snippet nbe "expect not to be" !b
expect(${1}).not.toBe(${2});
endsnippet

snippet eq "expect to equal" !b
expect(${1}).toEqual(${2});
endsnippet

snippet be "expect to be" !b
expect(${1}).toBe(${2});
endsnippet

snippet bef "beforeEach" !b
beforeEach(function() {
  ${2}
});
endsnippet

snippet aft "afterEach" !b
afterEach(function() {
  ${2}
});
endsnippet

snippet c "class" b
var ${1} =
new Class(${2}{
  ${3}
});
endsnippet

snippet ctor "constructor" b
constructor: function(${1}) {
  ${2}
}
endsnippet

snippet nun "not undefined" b
expect(${1}).not.toBe(undefined);
endsnippet

snippet un "undefined" b
expect(${1}).toBe(undefined);
endsnippet

snippet tr "to be true" b
expect(${1}).toBe(true);
endsnippet

snippet itp "itP" b
itP("${1}", function() {
  ${2}
});
endsnippet

snippet thb "toHaveBeenCalledWith" b
expect(${1}).toHaveBeenCalledWith(${2});
endsnippet

snippet ani "animations" b
{ time: 500, animations: []
  ${1}
},
endsnippet

snippet hdc "umlCall" b
.concat(hideUmlCall("${1}"))
endsnippet

snippet hdr "umlReturn" b
.concat(hideUmlReturn("${1}"))
endsnippet

snippet dc "umlCall" b
.concat(showUmlCall("${1}"))
endsnippet

snippet dr "umlReturn" b
.concat(showUmlReturn("${1}"))
endsnippet

snippet sh "show" b
.concat(ani("${1}", {opacity: 1}))
endsnippet

snippet hi "hide" b
.concat(ani("${1}", {opacity: 0}))
endsnippet

snippet req "require" b
var ${1} = require('${2:`!p
default_names = {
    "concat": "concat-stream",
	"combine": "stream-combiner",
	"AWS": "aws-sdk",
}
snip.rv = default_names.get(t[1]) or t[1]
`}');
endsnippet

snippet nc "node callback" w
function(err, data) {
  ${2}
}${3}
endsnippet

snippet av "argv" w
process.argv[${1}]
endsnippet

snippet server "HTTP server" b
var server = http.createServer(function(req, res) {
  ${1}
});

server.listen(process.argv[2]);
endsnippet

snippet stdin "stdin" w
process.stdin
endsnippet

snippet stdout "stdout" w
process.stdout
endsnippet

snippet stderr "stderr" w
process.stderr
endsnippet
