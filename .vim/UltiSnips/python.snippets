snippet ipdb "ipdb" !b
import ipdb; ipdb.set_trace()
endsnippet
snippet imp "Module import" b
import ${1:module}
endsnippet

snippet fim "from import" !b
from ${1:module} import ${2:thing}
endsnippet

snippet ut "Unit test" b
from unittest import TestCase
import unittest


class Test${1:Name}(TestCase):
    def setUp(self):
        ${2:pass}

    def test_${3:thing}(self):
        ${4:pass}


if __name__ == "__main__":
    unittest.main()
endsnippet

snippet m "Method" !b
def ${1:method}(self`!p 
snip.rv = ', ' if t[2] != "" else ""
`${2}):
    ${3:pass}

endsnippet

snippet in "__init__" !b
def __init__(self`!p
snip.rv = ', ' if t[2] != "" else ""
`${2}):
    `!p
snip >> 1
args = [x.split('=')[0].strip() for x in t[2].split(',')]
first_time = True
snip.rv = ""
for arg in args:
    if arg == "":
        continue
    line = 'self.{0} = {0}'.format(arg)
    if first_time:
        snip.rv = line
        first_time = False
    else:
        snip += line

if snip.rv == "":
    snip.rv = "pass"
`

endsnippet

snippet r "return" b
return 
endsnippet

snippet ifm "if main" !b
if __name__ == "__main__":
    ${1:pass}
endsnippet

snippet lic "License" !b
# -*- encoding: UTF-8 -*-
"""
django_idp

(c) 2014 Juan Luis Boya Garc√≠a
MIT License
"""

endsnippet

snippet d "define" !b
def ${1:function}(${2}):
    ${3:pass}
endsnippet

snippet c "class" !b
class ${1}(${2:object}):
    ${3:pass}
endsnippet

snippet eq "equal" !b
self.assertEqual(${1}, ${2})
endsnippet

snippet no "equal" !b
self.assertIsNone(${1})
endsnippet

snippet ex "exception" !b
class ${1}(${2:Exception}):
    ${3:pass}

endsnippet

snippet ar "assert raises" !b
with self.assertRaises(${1}):
    ${2:pass}
endsnippet

snippet tc "TestCase" !b
class Test${1}(unittest.TestCase):
    ${2}
endsnippet

snippet t "test" !b
def test_${1}(self${2}):
    ${3:pass}
endsnippet

snippet rp "rpc command" !b
@rpc_command
def ${1:do}(self, req${2:}):
    ${3:pass}

endsnippet

snippet trc "test rpc call" !b
response = self.rpcCall(${1:self.service}, ${2:self.client},
                        "${3:command}"${4:})
self.assertEqual(response, ${5:None})
endsnippet

snippet tre "test rpc error" !b
msg = self.rpcExpectError(${1:self.service}, ${2:self.client},
                          "${3:command}"${4:})
self.assertEqual(msg, "${5}")
endsnippet

snippet /(^|(?<=\W))\./ "self." r
self.
endsnippet

snippet argp "argparse" b
from argparse import ArgumentParser

parser = ArgumentParser(description=
		"${1}")
${2}

args = parser.parse_args()
${3}
endsnippet

snippet flag "argument flag" b
parser.add_argument("${1}", dest="${2}", action="store_true")
endsnippet

snippet astr "argument string" b
parser.add_argument("${1}", dest="${2}", default="${3}", type=${4:str})
endsnippet

snippet aint "argument integer" b
parser.add_argument("${1}", dest="${2}", default=${3}, type=${4:int})
endsnippet

snippet par "postional argument" b
parser.add_argument("${1}", type=${2:str})
endsnippet

snippet pars "postional arguments" b
parser.add_argument("${1}", nargs=${2:"+"}, type=${3:str})
endsnippet
